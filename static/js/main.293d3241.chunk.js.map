{"version":3,"sources":["components/Start.js","components/Cell.js","components/BackBtn.js","components/ResetBtn.js","data.js","App.js","index.js"],"names":["Start","_ref","StartStyles","handleStart","react_default","a","createElement","className","type","onClick","Cell","props","value","order","index","state","handleClick","BackBtn","handleBack","ResetBtn","handleReset","data","id","cellcolor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","cells","map","cell","counter","gameOver","turns","winner","player1","prompt","player2","players","toConsumableArray","length","i","pop","objectSpread","bind","assertThisInitialized","combinations","turn1","filter","item","turn2","_combinations$i","slicedToArray","b","c","includes","position","_this$state","updatedCells","toggle","push","checkForWinner","isGameOver","_this2","key","_this$state2","currentPlayer","headerClasses","classNames","Header","bg_red","bg_green","color_red","color_green","bg_white","winnerClasses","Winner","Winner--won bg_green","Winner--won bg_red","Winner--draw","every","player","concat","components_Start","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.293d3241.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Start = ({ StartStyles, handleStart}) => {\r\n\r\n    return (\r\n        <div>\r\n            <button className={StartStyles} type=\"button\" onClick={ handleStart }>Start</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start;\r\n","import React from 'react';\r\n\r\nexport default function Cell(props) {\r\n\r\n\r\n    return (\r\n        <div className={(props.value === 1) ? \"Cell bg_red\"\r\n                        : (props.value === 2) ? \"Cell bg_green\"\r\n                        : (props.value === 0) ? \"Cell bg_white\" \r\n                        : \"Cell bg_white\"}\r\n            order={props.index}\r\n            state={props.value}\r\n            onClick={props.handleClick}\r\n        /> \r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function BackBtn(props) {\r\n\r\n    return (\r\n\r\n        <button \r\n            className=\"Back_btn btn\"\r\n            onClick={props.handleBack}\r\n        >\r\n            back\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function ResetBtn(props) {\r\n\r\n    return (\r\n\r\n        <button\r\n            className=\"Reset_btn btn\"\r\n            onClick={props.handleReset}\r\n        >\r\n            reset\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n","const data =[\r\n    {\r\n        id: 0,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 1,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 2,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 3,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 4,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 5,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 6,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 7,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 8,\r\n        cellcolor: 0\r\n    },\r\n]\r\n\r\nexport default data;","import React, { Component } from \"react\";\r\nimport Start from \"./components/Start\";\r\nimport Cell from \"./components/Cell\";\r\nimport BackBtn from \"./components/BackBtn\";\r\nimport ResetBtn from \"./components/ResetBtn\";\r\nimport data from \"./data\";\r\nimport classNames from \"classnames\";\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cells: data,\r\n            counter: 0,\r\n            winner: null,\r\n            gameOver: false,\r\n            players: [],\r\n            turns: []\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    isGameOver(counter) {\r\n\r\n        return counter === 9;\r\n    }\r\n\r\n    checkForWinner(turns) {\r\n        const combinations = [\r\n            \"012\", \"345\", \"678\", \"036\", \"147\", \"258\", \"048\", \"246\"\r\n        ];\r\n\r\n        const turn1 = turns.filter((item, i) => i % 2 === 0);\r\n        const turn2 = turns.filter((item, i) => i % 2 === 1);\r\n\r\n        for (let i = 0; i < combinations.length; i++) {\r\n            const [a, b, c] = combinations[i];\r\n\r\n            if (turn1.includes(+a) && turn1.includes(+b) && turn1.includes(+c)) {\r\n                return 0;\r\n            } else if (turn2.includes(+a) && turn2.includes(+b) && turn2.includes(+c)) {\r\n                return 1;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleClick(position) {\r\n        const turns = [...this.state.turns];\r\n        let { counter, winner, gameOver } = this.state;\r\n        const updatedCells = [...this.state.cells];\r\n        const toggle = this.state.counter % 2;\r\n\r\n        if (this.state.cells[position].cellcolor === 0) {\r\n            updatedCells[position] = {\r\n                ...updatedCells[position],\r\n                cellcolor: toggle ? 2 : 1,\r\n            }\r\n\r\n            if (toggle) {\r\n                turns.push(position);\r\n                counter += 1;\r\n            } else {\r\n                turns.push(position);\r\n                counter += 1;\r\n            }\r\n        }\r\n\r\n        winner = this.checkForWinner(turns);\r\n        gameOver = this.isGameOver(counter);           \r\n\r\n        this.setState({\r\n            cells: updatedCells,\r\n            turns,\r\n            counter,\r\n            winner,\r\n            gameOver\r\n        })        \r\n    }    \r\n\r\n    handleReset = () => {\r\n\r\n        this.setState(prevState => {\r\n            const updatedCells = prevState.cells.map(cell => {\r\n                cell.cellcolor = 0;\r\n                return cell;\r\n            });\r\n\r\n            return {\r\n                cells: updatedCells,\r\n                counter: 0,\r\n                gameOver: false,\r\n                turns: [],\r\n                winner: null\r\n            };\r\n        });\r\n    }\r\n\r\n    handleStart = () => {\r\n        const player1 = prompt(\"Player #1 name\");\r\n        const player2 = prompt(\"Player #2 name\");\r\n        this.setState({ players: [player1, player2] });\r\n    }\r\n\r\n    handleBack = () => {\r\n        const cells = [...this.state.cells];\r\n        const turns = [...this.state.turns];\r\n        let counter = this.state.counter;\r\n\r\n        if (turns.length > 0) {\r\n            const i = turns.pop();\r\n            counter--;\r\n          \r\n            cells[i] = {\r\n                ...cells[i],\r\n                cellcolor: 0,\r\n            }\r\n        }\r\n                \r\n        this.setState(\r\n            {\r\n                cells,\r\n                counter,\r\n                turns,\r\n                gameOver: false,\r\n                winner: null,\r\n            }\r\n        );        \r\n    }\r\n\r\n    render() {\r\n\r\n        const cells = this.state.cells.map((cell, index) => (\r\n            <Cell\r\n                key={cell.id}\r\n                index={index}\r\n                value={cell.cellcolor}\r\n                handleClick={() => this.handleClick(cell.id)}\r\n            />\r\n        ));\r\n\r\n        const { winner, gameOver, counter, players } = this.state;\r\n        const currentPlayer = counter % 2 ? 1 : 0;\r\n\r\n        const headerClasses = classNames({\r\n            \"Header\": true,\r\n            \"bg_red\": counter % 2 === 0,\r\n            \"bg_green\": counter % 2 !== 0,\r\n            \"color_red\": winner === 0, \r\n            \"color_green\": winner === 1,            \r\n            \"bg_white\": winner !== null || gameOver,\r\n        })\r\n        \r\n        const winnerClasses = classNames({\r\n            \"Winner\": true,\r\n            \"Winner--won bg_green\": winner === 1,\r\n            \"Winner--won bg_red\": winner === 0,\r\n            \"Winner--draw\": gameOver,\r\n        });\r\n\r\n        if (players.every(player => player) &&\r\n            players.length === 2) {\r\n\r\n            return (\r\n                <div>\r\n                    <div className={\"display_block\"}>\r\n                        {\r\n                            winner !== null\r\n                                ? <h1 className={headerClasses}>{players[winner]} won</h1>\r\n                                : <h1 className={headerClasses}>{gameOver ? \"game over\" : players[currentPlayer]}</h1>\r\n                        }\r\n                                                \r\n                        <BackBtn handleBack={this.handleBack} />\r\n\r\n                        <div className=\"Container\">\r\n                            {cells}\r\n                            <div className={winnerClasses} >\r\n                                {\r\n                                    winner !== null\r\n                                        ? `The ${players[winner]} won the competition`\r\n                                        : gameOver\r\n                                        && \"Draw\"\r\n                                }\r\n                            </div>\r\n\r\n                            <ResetBtn handleReset={this.handleReset} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            \r\n            return (\r\n                <div>\r\n                    <Start\r\n                        StartStyles={\"Start_btn btn\"}\r\n                        handleStart={this.handleStart}\r\n                    />\r\n                </div>\r\n            )\r\n        }                   \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}