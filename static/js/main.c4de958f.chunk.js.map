{"version":3,"sources":["index.js","Start.js","Cell.js","data.js","App.js"],"names":["__webpack_require__","r","__webpack_exports__","module","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_3__","ReactDOM","render","a","createElement","document","getElementById","hot","accept","Start","_ref","startstyle","handleStart","react_default","style","className","type","onClick","Cell","props","stylesColor","backgroundColor","1","2","3","value","order","index","state","handleClick","data","id","cellcolor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cells","counter","reset","players","player1","player2","bind","assertThisInitialized","event","_this2","position","target","closest","getAttribute","setState","prevState","map","cell","push","prompt","countBack","pop","_this3","key","styles","startStyles","winnertStyles","resetText","headerStyles","every","player","length","display","text","combinations","i","_combinations$i","slicedToArray","b","c","concat","color","winner","src_Start","handleBack","handleReset","Component"],"mappings":"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","file":"static/js/main.c4de958f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nmodule.hot.accept();\n","import React from 'react';\r\n\r\nconst Start = ({ startstyle, handleStart }) => {\r\n    return (\r\n        <div>\r\n            <button style={startstyle} className='Start_btn btn' type=\"button\" onClick={ handleStart }>Start</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Start;","import React from 'react';\r\n\r\nexport default function Cell(props) {\r\n    const colors = {\r\n        1: 'red',\r\n        2: 'yellow',\r\n        3: 'white'\r\n    }\r\n\r\n    const stylesColor = {\r\n        backgroundColor: colors[props.value],\r\n    };\r\n\r\n    return (\r\n        <div style={stylesColor} className='cell' order={props.index} state={props.value} onClick={props.handleClick} />\r\n    )\r\n}\r\n","const data =[\r\n    {\r\n        id: 0,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 1,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 2,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 3,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 4,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 5,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 6,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 7,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 8,\r\n        cellcolor: 0\r\n    },\r\n]\r\n\r\nexport default data;","import React, { Component } from \"react\";\r\nimport Start from \"./Start\";\r\nimport Cell from \"./Cell\";\r\nimport data from \"./data\";\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cells: data,\r\n            counter: 0,\r\n            reset: false,             \r\n            players: [],\r\n            player1: [],\r\n            player2: [],\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        const position = +event.target.closest(\".cell\").getAttribute(\"order\");\r\n\r\n        this.setState(prevState => {\r\n            const updatedCells = prevState.cells.map(cell => {\r\n                if (cell.id === position && cell.cellcolor === 0) {\r\n                    if (this.state.counter % 2 === 0) {\r\n                        cell.cellcolor = 1;\r\n                        prevState.player1.push(position);\r\n                    } else if (this.state.counter % 2 !== 0) {\r\n                        cell.cellcolor = 2;\r\n                        prevState.player2.push(position);\r\n                    }\r\n                    prevState.counter++;\r\n                }\r\n                return cell;\r\n            });\r\n\r\n            return {\r\n                cells: updatedCells\r\n            };\r\n        });\r\n    }\r\n\r\n    handleReset() {\r\n        this.setState(prevState => {\r\n            prevState.counter = 0;\r\n\r\n            const updatedCells = prevState.cells.map(cell => {\r\n                cell.cellcolor = 0;\r\n                return cell;\r\n            });\r\n\r\n            return {\r\n                cells: updatedCells\r\n            };\r\n        });\r\n\r\n        this.setState({reset: !this.state.reset})\r\n        \r\n    }\r\n\r\n    handleStart() {\r\n        const player1 = prompt(\"Player #1 name\");\r\n        const player2 = prompt(\"Player #2 name\");\r\n        this.setState({ players: [player1, player2] });\r\n    }\r\n\r\n    handleBack() {\r\n        this.setState(prevState => {\r\n            let countBack;\r\n\r\n            if (prevState.counter > 0) {\r\n                if (prevState.counter % 2 === 0) {\r\n                    countBack = prevState.player2.pop();\r\n                    prevState.counter--;\r\n                    prevState.cells[countBack].cellcolor = 0;\r\n                } else if (prevState.counter % 2 !== 0) {\r\n                    countBack = prevState.player1.pop();\r\n                    prevState.counter--;\r\n                    prevState.cells[countBack].cellcolor = 0;\r\n                }\r\n            }\r\n\r\n            return prevState;\r\n        });\r\n    }\r\n\r\n    checkForWinner() {\r\n   \r\n    }\r\n\r\n    render() {\r\n        \r\n        const cells = this.state.cells.map((cell, index) => (\r\n            <Cell\r\n                key={index}\r\n                index={index}\r\n                value={cell.cellcolor}\r\n                handleClick={this.handleClick}\r\n            />\r\n        ));\r\n\r\n        const styles = {};\r\n        const startStyles = {};\r\n        const winnertStyles = {};\r\n        let resetText = \"reset\";\r\n        const headerStyles = {}; \r\n\r\n        if (\r\n            this.state.players.every(player => player) &&\r\n            this.state.players.length === 2\r\n        ) {\r\n            styles.display = \"block\";\r\n            startStyles.display = \"none\";\r\n        } else {\r\n            styles.display = \"none\";\r\n            startStyles.display = \"block\";\r\n        }\r\n\r\n        if (this.state.reset) {\r\n            winnertStyles.display = \"none\";\r\n            resetText = \"reset\";\r\n        }\r\n\r\n        if (this.state.counter % 2 === 0) {\r\n            headerStyles.backgroundColor = 'rgb(173, 74, 74)';\r\n            headerStyles.text = this.state.players[0]\r\n        } else if (this.state.counter % 2 !== 0) {\r\n            headerStyles.backgroundColor = 'rgb(233, 247, 30)';\r\n            headerStyles.text = this.state.players[1]\r\n        }\r\n\r\n        const combinations = [\r\n            \"012\",\r\n            \"345\",\r\n            \"678\",\r\n            \"036\",\r\n            \"147\",\r\n            \"258\",\r\n            \"048\",\r\n            \"246\"\r\n        ];\r\n\r\n        for (let i = 0; i < combinations.length; i++) {\r\n            const [a, b, c] = combinations[i];\r\n            if (\r\n                this.state.cells[a].cellcolor !== 0 &&\r\n                this.state.cells[a].cellcolor === this.state.cells[b].cellcolor &&\r\n                this.state.cells[b].cellcolor === this.state.cells[c].cellcolor\r\n            ) {\r\n                winnertStyles.text = `The ${\r\n                    this.state.players[this.state.cells[a].cellcolor]\r\n                    } won the competition`;\r\n                winnertStyles.display = \"inline-block\";\r\n                winnertStyles.color = \"#fff\";\r\n                resetText = \"revenge\";\r\n                winnertStyles.backgroundColor =\r\n                    this.state.counter % 2 === 0 ? \"#ff0\" : \"#f00\";\r\n                winnertStyles.winner = true;\r\n\r\n                headerStyles.text = this.state.players[this.state.cells[a].cellcolor];\r\n                headerStyles.backgroundColor = (this.state.cells[a].cellcolor)\r\n                    ? 'rgb(173, 74, 74)'\r\n                    : 'rgb(233, 247, 30)';\r\n\r\n            }\r\n        }\r\n\r\n        if (this.state.counter === 9) {\r\n            winnertStyles.text = \"you played a draw\";\r\n            winnertStyles.display = \"inline-block\";\r\n            winnertStyles.backgroundColor = \"#000\";\r\n            winnertStyles.color = \"#fff\";\r\n            resetText = \"revenge\";\r\n\r\n            headerStyles.backgroundColor = '#000';\r\n            headerStyles.text = \"Game over\";\r\n            headerStyles.backgroundColor = \"#000\";\r\n            headerStyles.color = \"#ffff\";\r\n        }    \r\n\r\n        return (\r\n            <div>\r\n                <Start\r\n                    startstyle={startStyles}\r\n                    handleStart={this.handleStart.bind(this)}\r\n                />\r\n\r\n                <div style={styles}>\r\n                    <h1\r\n                        style={headerStyles}\r\n                        className=\"App_header\"\r\n                    >\r\n                        {headerStyles.text}\r\n                    </h1>\r\n                    <button className=\"Back_btn btn\" onClick={() => this.handleBack()}>\r\n                        back\r\n                    </button>\r\n\r\n                    <div className=\"container\">\r\n                        {cells}\r\n                        <div\r\n                            style={winnertStyles}\r\n                            className=\"winner\"\r\n                        >\r\n                            {winnertStyles.text}\r\n                        </div>\r\n\r\n                        <button\r\n                            className=\"Reset_btn btn\"\r\n                            onClick={() => this.handleReset()}\r\n                        >\r\n                            {resetText}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// console.log(Math.round(Math.random(0, 8) * 10));\r\n"],"sourceRoot":""}