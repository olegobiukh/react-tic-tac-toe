{"version":3,"sources":["components/Start.js","components/Cell.js","components/BackBtn.js","components/ResetBtn.js","data.js","App.js","index.js"],"names":["Start","_ref","StartStyles","handleStart","react_default","a","createElement","className","type","onClick","Cell","props","value","order","index","state","handleClick","BackBtn","handleBack","ResetBtn","handleReset","data","id","cellcolor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","winner","cells","map","cell","counter","gameOver","player1","prompt","player2","players","countBack","toConsumableArray","pop","bind","assertThisInitialized","combinations","i","length","_combinations$i","slicedToArray","b","c","position","_this2","updatedCells","push","checkForWinner","isGameOver","_this3","key","headerClasses","classNames","Header","bg_red","bg_green","color_red","color_green","bg_white","winnerClasses","Winner","Winner--won bg_green","Winner--won bg_red","Winner--draw","every","player","concat","components_Start","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.e349adff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Start = ({ StartStyles, handleStart}) => {\r\n\r\n    return (\r\n        <div>\r\n            <button className={StartStyles} type=\"button\" onClick={ handleStart }>Start</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start;\r\n","import React from 'react';\r\n\r\nexport default function Cell(props) {\r\n\r\n\r\n    return (\r\n        <div className={(props.value === 1) ? \"Cell bg_red\"\r\n                        : (props.value === 2) ? \"Cell bg_green\"\r\n                        : (props.value === 0) ? \"Cell bg_white\" \r\n                        : \"Cell bg_white\"}\r\n            order={props.index}\r\n            state={props.value}\r\n            onClick={props.handleClick}\r\n        /> \r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function BackBtn(props) {\r\n\r\n    return (\r\n\r\n        <button \r\n            className=\"Back_btn btn\"\r\n            onClick={props.handleBack}\r\n        >\r\n            back\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function ResetBtn(props) {\r\n\r\n    return (\r\n\r\n        <button\r\n            className=\"Reset_btn btn\"\r\n            onClick={props.handleReset}\r\n        >\r\n            reset\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n","const data =[\r\n    {\r\n        id: 0,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 1,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 2,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 3,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 4,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 5,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 6,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 7,\r\n        cellcolor: 0\r\n    },\r\n    {\r\n        id: 8,\r\n        cellcolor: 0\r\n    },\r\n]\r\n\r\nexport default data;","import React, { Component } from \"react\";\r\nimport Start from \"./components/Start\";\r\nimport Cell from \"./components/Cell\";\r\nimport BackBtn from \"./components/BackBtn\";\r\nimport ResetBtn from \"./components/ResetBtn\";\r\nimport data from \"./data\";\r\nimport classNames from \"classnames\";\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cells: data,\r\n            counter: 0,\r\n            winner: false,\r\n            gameOver: false,\r\n            players: [],\r\n            player1: [],\r\n            player2: [],\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n\r\n    isGameOver(counter) {\r\n\r\n        return (counter === 9) ? true : false;\r\n    }\r\n\r\n    checkForWinner() {\r\n        const combinations = [\r\n            \"012\", \"345\", \"678\", \"036\", \"147\", \"258\", \"048\", \"246\"\r\n        ];\r\n\r\n        for (let i = 0; i < combinations.length; i++) {\r\n            const [a, b, c] = combinations[i];\r\n            if (\r\n                this.state.cells[a].cellcolor !== 0 &&\r\n                this.state.cells[a].cellcolor === this.state.cells[b].cellcolor &&\r\n                this.state.cells[b].cellcolor === this.state.cells[c].cellcolor\r\n            ) {\r\n                return this.state.cells[a].cellcolor === 2 ? 2 : 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClick(position) {\r\n        \r\n            this.setState(prevState => {\r\n                const player1 = [...prevState.player1];\r\n                const player2 = [...prevState.player2];\r\n                let {counter, winner, gameOver} = prevState;\r\n\r\n                const updatedCells = prevState.cells.map(cell => {\r\n                    if (cell.id === position && cell.cellcolor === 0) {\r\n\r\n                        if (this.state.counter % 2 === 0) {\r\n                            cell.cellcolor = 1;\r\n                            player1.push(position);\r\n                            counter += 1;\r\n                        } else {\r\n                            cell.cellcolor = 2;\r\n                            player2.push(position);\r\n                            counter += 1;\r\n                        }\r\n                        winner = this.checkForWinner();\r\n                        gameOver = this.isGameOver(counter);\r\n                        \r\n                    }\r\n                    return cell;\r\n                });            \r\n                \r\n                \r\n                if (this.state.counter % 2 === 0) {\r\n                    return {\r\n                        cells: updatedCells,\r\n                        player1,\r\n                        counter,\r\n                        winner,\r\n                        gameOver\r\n                    };\r\n                } else {\r\n                    return {\r\n                        cells: updatedCells,\r\n                        player2,\r\n                        counter,\r\n                        winner,\r\n                        gameOver\r\n                    };\r\n                }\r\n                \r\n            });\r\n        \r\n    }    \r\n\r\n    handleReset = () => {\r\n\r\n        this.setState(prevState => {\r\n            let winner = prevState.winner;\r\n            winner = 0;\r\n            const updatedCells = prevState.cells.map(cell => {\r\n                cell.cellcolor = 0;\r\n                return cell;\r\n            });\r\n\r\n            return {\r\n                cells: updatedCells,\r\n                counter: 0,\r\n                gameOver: false,\r\n                winner\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n    handleStart = () => {\r\n        const player1 = prompt(\"Player #1 name\");\r\n        const player2 = prompt(\"Player #2 name\");\r\n        this.setState({ players: [player1, player2] });\r\n    }\r\n\r\n    handleBack = () => {\r\n\r\n        this.setState(prevState => {\r\n            const player1 = [...prevState.player1];\r\n            const player2 = [...prevState.player2];\r\n            let counter = prevState.counter;\r\n            let countBack;\r\n            let winner = prevState.winner;\r\n            \r\n            if (prevState.counter > 0) {\r\n                winner = 0;\r\n                if (prevState.counter % 2 === 0) {\r\n                    countBack = player2.pop();\r\n                    \r\n                    const updatedCells = prevState.cells.map(cell => {\r\n                        if (cell.id === countBack) {\r\n                            cell.cellcolor = 0;\r\n                        }\r\n                        return cell;\r\n                    });\r\n                    \r\n                    return {\r\n                        cells: updatedCells,\r\n                        counter: counter - 1,\r\n                        player2,\r\n                        gameOver: false,\r\n                        winner\r\n                    };\r\n                } else {\r\n                    countBack = player1.pop();\r\n\r\n                    const updatedCells = prevState.cells.map(cell => {\r\n                        if (cell.id === countBack) {\r\n\r\n                            cell.cellcolor = 0;\r\n                        }\r\n                        return cell;\r\n                    });\r\n                    \r\n                    return {\r\n                        cells: updatedCells,\r\n                        counter: counter - 1,\r\n                        player1: player1,\r\n                        gameOver: false,\r\n                        winner\r\n                    };\r\n                }\r\n            }            \r\n            \r\n        });\r\n    }\r\n\r\n    render() {\r\n        \r\n        const cells = this.state.cells.map((cell, index) => (\r\n            <Cell\r\n                key={cell.id}\r\n                index={index}\r\n                value={cell.cellcolor}\r\n                handleClick={() => this.handleClick(cell.id)}\r\n            />\r\n        ));\r\n\r\n        const headerClasses = classNames({\r\n            \"Header\": true,\r\n            \"bg_red\": this.state.counter % 2 === 0,\r\n            \"bg_green\": this.state.counter % 2 !== 0,\r\n            \"color_red\": this.state.winner === 1, \r\n            \"color_green\": this.state.winner === 2,            \r\n            \"bg_white\": this.state.winner || this.state.gameOver,\r\n        })\r\n        \r\n        const winnerClasses = classNames({\r\n            \"Winner\": true,\r\n            \"Winner--won bg_green\": this.state.winner === 2,\r\n            \"Winner--won bg_red\": this.state.winner === 1,\r\n            \"Winner--draw\": this.state.gameOver,\r\n        });\r\n\r\n        if (this.state.players.every(player => player) &&\r\n            this.state.players.length === 2) {\r\n\r\n            return (\r\n                <div>\r\n                    <div className={\"display_block\"}>\r\n                        <h1 className={headerClasses}>\r\n                            {(this.state.winner === 2)\r\n                                ? `${this.state.players[1]} won`\r\n                                : (this.state.winner === 1)\r\n                                    ? `${this.state.players[0]} won`\r\n                                    : (this.state.gameOver)\r\n                                        ? \"Game over\"\r\n                                        : (this.state.counter % 2 === 0)\r\n                                            ? this.state.players[0]\r\n                                            : this.state.players[1]\r\n                            }\r\n                        </h1>\r\n\r\n                        <BackBtn handleBack={this.handleBack} />\r\n\r\n                        <div className=\"Container\">\r\n                            {cells}\r\n                            <div className={winnerClasses} >\r\n                                {\r\n                                    (this.state.winner)\r\n                                        ? `The ${this.state.players[this.state.winner - 1]} won the competition`\r\n                                        : (this.state.gameOver)\r\n                                        && \"Draw\"\r\n                                }\r\n                            </div>\r\n\r\n                            <ResetBtn handleReset={this.handleReset} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            \r\n            return (\r\n                <div>\r\n                    <Start\r\n                        StartStyles={\"Start_btn btn\"}\r\n                        handleStart={this.handleStart}\r\n                    />\r\n                </div>\r\n            )\r\n        }                   \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}